;(let ((x 10)) (let ((y 5)) (- x y)))

;(let ((square (lambda (x) (* x x)))) (- (+ (funcall square 5) (funcall square 4) ) (funcall square 3) ) )

(let ((y 10)) 
	(let ((timesy 
		(lambda (x) (* x y)))
	) 
	(funcall timesy 6)
))

;(let ((x (cons 5 (cons 10 5)))) (+ (head x) (tail (tail x))))

;(if (odd? 5) 1 (* 4 4))

;(odd? (+ (* (add1 1) 2) (/ 9 3)))

;(let ((x 5)(y 10)) (+ x y))

;(+ (zero? 0) 5)